public boolean checkSignature(String requestId, Object object, @SuppressWarnings("rawtypes") Class objectClass,
			String url, String signature, String partnerId) {

		try {
			String payload = GetPayload(requestId, object, objectClass, url, partnerId);
			String shaPayload = Utils.sha256(payload);
			String publicKey = KeyManager.GetInstance(applicationConfig).getPartnerKey(partnerId).getRsaPublicKey();
			boolean result = Utils.verifyWithRSA(shaPayload, signature, publicKey);
			WriteLog.write(requestId, "[checkSignature] result: " + result);

			return result;

		} catch (Exception ex) {
			WriteLog.error(requestId, "checkSignature FAILED: " + ex.toString(), ex);
			return false;
		}
	}


public static String sha256(String data) {

		StringBuffer sb = new StringBuffer();
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-256");
			md.update(data.getBytes("UTF-8"));

			byte byteData[] = md.digest();
			for (int i = 0; i < byteData.length; i++) {
				sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
			}
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return sb.toString();
	}


rsa-public-key: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCDY1DzbqoavP8UVPYARHpy+zPlaFiBdf3imr5m4RdbHCwMueevk+NoWV2dqL/LBnk8oWMqWkgMDnTleXe/jvj6zQEuuCoBVDiZq4k0JXbHdTmXg0/fH7d9YD0BsSkpSJH8A9RBSnjvIzKLNHXKTUyxG1QIIKbU2lhVAB/jK2UtdwIDAQAB
rsa-private-key: MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAINjUPNuqhq8/xRU9gBEenL7M+VoWIF1/eKavmbhF1scLAy556+T42hZXZ2ov8sGeTyhYypaSAwOdOV5d7+O+PrNAS64KgFUOJmriTQldsd1OZeDT98ft31gPQGxKSlIkfwD1EFKeO8jMos0dcpNTLEbVAggptTaWFUAH+MrZS13AgMBAAECgYA8QxI/BRP6PZNVVP6b8syi7jrITsrBXkf7ZnRMJZOb01kU4TO14UPdeZepl1uYmDiFKZSdOVlwRjUxhzv4XXAulv3BNS5/CJfpWOj6ad5dfClws10tkXFWwp6zLWic9eXJQF+UGHYMy1edzbRpbNq1L8lrvAUz+UPn3u67PgjIAQJBAM210DyfBhwUfYXEmodOxQgeoH07r2m8EW7DlIHxjHZ+h0Y4rntrAdLv7rnawvm1fXWBsI29cLcUk4bpxBFHkXcCQQCjghyqvowjANw9mDenIEpaT1N5EiA9TYubt4f6CG+iwpBxmUDCe5E8xVBjl4kkfid0z+KG1fB4VE+S9d7y1kQBAkAA0B4hjzNT+xS/6ZX+wOXwcUaLGChKT6719BnrJYw7j6ZzNZgi7rpUHhSgcWfh2sDDLR8IgF4oqxEmMFhRBSpjAkBSaVoZlUD8w4o+YWJrkhLnwePIuiIVw+gB7FdU5rudxYMYPq4tWCqz/p+uEsrE4fDxJ3Z9j4dMnvIcmGBu9SABAkAQchKExzfalMJlMXzLn86I8xbAwZLIve+X+XXiMPxswDJ6R/CvtLoxczRBdB2d2u5e+IDzLGXM6haGd9pZ2uvt